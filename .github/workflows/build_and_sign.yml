name: Build and Sign Container Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Image tag to build and sign'
        required: false
        default: 'latest'

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write  # For GitHub Container Registry
      id-token: write  # For AWS credential provider
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # Login to ECR by default
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: ${{ secrets.USE_GITHUB_REGISTRY != 'true' && secrets.USE_GCR != 'true' }}
      
    # Optional GitHub Container Registry login
    - name: Login to GitHub Container Registry
      if: ${{ secrets.USE_GITHUB_REGISTRY == 'true' }}
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Optional Google Container Registry login
    - name: Login to Google Container Registry
      if: ${{ secrets.USE_GCR == 'true' }}
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}

    - name: Set image name
      id: set-image-name
      run: |
        # Default to ECR
        if [[ "${{ secrets.USE_GITHUB_REGISTRY }}" == "true" ]]; then
          REGISTRY="ghcr.io"
          REPOSITORY="${{ github.repository }}"
        elif [[ "${{ secrets.USE_GCR }}" == "true" ]]; then
          REGISTRY="gcr.io"
          REPOSITORY="${{ secrets.GCR_PROJECT_ID }}/${{ secrets.GCR_REPOSITORY }}"
        else
          # Default to ECR
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          # Use the specified ECR repo or default to repository name
          REPOSITORY="${{ secrets.ECR_REPOSITORY || github.repository }}"
        fi
        
        IMAGE_TAG="${{ github.event.inputs.image-tag || github.sha }}"
        FULL_IMAGE_NAME="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
        
        echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "Image will be: ${FULL_IMAGE_NAME}"

    - name: Build and push Docker image
      run: |
        docker build -t ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }} -f Dockerfile .
        docker push ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}

    - name: Install Notation CLI
      run: |
        # Download Notation
        curl -Lo notation.tar.gz https://github.com/notaryproject/notation/releases/download/v1.0.0/notation_1.0.0_linux_amd64.tar.gz
        
        # Extract and install
        mkdir -p notation-bin
        tar xzvf notation.tar.gz -C notation-bin
        sudo install notation-bin/notation /usr/local/bin/notation
        
        # Cleanup and verify
        rm -rf notation-bin notation.tar.gz
        notation version

    - name: Install AWS Signer plugin for Notation
      run: |
        # Download AWS Signer plugin
        curl -Lo aws-signer.tar.gz https://github.com/notaryproject/notation-aws-signer/releases/download/v1.0.0/notation-aws-signer_1.0.0_linux_amd64.tar.gz
        
        # Extract and install
        mkdir -p aws-signer-bin
        tar xzvf aws-signer.tar.gz -C aws-signer-bin
        sudo install aws-signer-bin/notation-aws-signer /usr/local/bin/notation-aws-signer
        
        # Cleanup
        rm -rf aws-signer-bin aws-signer.tar.gz
        
        # Create plugin directory and install plugin
        mkdir -p ~/.config/notation/plugins/
        notation plugin install aws-signer
        
        # Verify installation
        notation plugin list

    - name: Sign image with Notation using AWS Signer
      env:
        AWS_SIGNING_PROFILE_NAME: ${{ secrets.AWS_SIGNING_PROFILE_NAME }}
      run: |
        # Sign the image
        notation sign --plugin aws-signer --id $AWS_SIGNING_PROFILE_NAME ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
        
        # Verify the signature
        notation verify ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
