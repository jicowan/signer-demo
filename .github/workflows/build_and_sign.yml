name: Build and Sign Container Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Image tag to build and sign'
        required: false
        default: 'latest'

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write  # For GitHub Container Registry
      id-token: write  # For AWS credential provider
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # Login to ECR by default
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with: 
        mask-password: true
      
    - name: Set image name
      id: set-image-name
      run: |
        # Default to ECR
        REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        # Use the specified ECR repo or default to repository name
        REPOSITORY="${{ secrets.ECR_REPOSITORY || github.repository }}"
        
        IMAGE_TAG="${{ github.event.inputs.image-tag || github.sha }}"
        FULL_IMAGE_NAME="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
        
        echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "Image will be: ${FULL_IMAGE_NAME}"

    - name: Build and push Docker image
      working-directory: ./app
      run: |
        docker build -t ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }} -f Dockerfile .
        docker push ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}

    - name: Install Notation CLI and AWS Signer Plugin
      run: |
        # Determine which package to use based on OS
        if [ -f /etc/debian_version ]; then
          echo "Installing Debian package for Notation and AWS Signer plugin"
          curl -Lo aws-signer-notation-cli.deb https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb
          sudo dpkg -i aws-signer-notation-cli.deb
          # Fix any potential dependency issues
          sudo apt-get -f install -y
        elif [ -f /etc/redhat-release ]; then
          echo "Installing RPM package for Notation and AWS Signer plugin"
          curl -Lo aws-signer-notation-cli.rpm https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/rpm/latest/aws-signer-notation-cli_amd64.rpm
          sudo rpm -i aws-signer-notation-cli.rpm
        else
          echo "ERROR: Unknown OS. Cannot determine which package to install."
          cat /etc/*-release
          exit 1
        fi
        
        # Verify the installation - plugin should be registered
        echo "Verifying plugin registration:"
        notation plugin list
        if [ $? -ne 0 ]; then
          echo "ERROR: Notation or AWS Signer plugin not installed correctly."
          exit 1
        fi
        
        # Find all notation-aws-signer binaries on the system
        echo "Looking for the aws-signer plugin binary:"
        sudo find / -name "notation-aws-signer" -type f 2>/dev/null || echo "No notation-aws-signer binary found on the system"
        
        # Check plugin directory structure
        echo "Checking Notation plugin directory:"
        find ~/.config/notation -type f 2>/dev/null || echo "No files in ~/.config/notation"
        
    - name: Sign image with Notation using AWS Signer
      env:
        AWS_SIGNING_PROFILE_NAME: ${{ secrets.AWS_SIGNING_PROFILE_NAME }}
        # Set Notation debug and experimental mode to help
        NOTATION_DEBUG: 1
        NOTATION_EXPERIMENTAL: 1
      run: |
        # Export environment variables that AWS Signer might need
        export AWS_REGION=${{ secrets.AWS_REGION }}
        
        echo "Showing available plugins before signing:"
        notation plugin list
        
        # Sign the image - try using the plugin by name
        echo "Signing image with AWS Signer profile: $AWS_SIGNING_PROFILE_NAME"
        notation sign --plugin aws-signer --id $AWS_SIGNING_PROFILE_NAME ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
        
        # Verify the signature
        echo "Verifying image signature"
        notation verify ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
