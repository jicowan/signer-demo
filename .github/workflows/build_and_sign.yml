name: Build and Sign Container Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Image tag to build and sign'
        required: false
        default: 'latest'

jobs:
  build-and-sign:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write  # For GitHub Container Registry
      id-token: write  # For AWS credential provider
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # Login to ECR by default
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with: 
        mask-password: true
      
    - name: Set image name
      id: set-image-name
      run: |
        # Default to ECR
        REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        # Use the specified ECR repo or default to repository name
        REPOSITORY="${{ secrets.ECR_REPOSITORY || github.repository }}"
        
        IMAGE_TAG="${{ github.event.inputs.image-tag || github.sha }}"
        FULL_IMAGE_NAME="${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}"
        
        echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "Image will be: ${FULL_IMAGE_NAME}"

    - name: Build and push Docker image
      working-directory: ./app
      run: |
        docker build -t ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }} -f Dockerfile .
        docker push ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}

    - name: Install Notation CLI and AWS Signer Plugin
      run: |
        # Download Notation
        # Determine if we're using an Ubuntu/Debian runner or Amazon Linux
        if [ -f /etc/debian_version ]; then
          echo "Installing AWS Signer Notation CLI for Debian/Ubuntu..."
          curl -Lo aws-signer-notation-cli.deb https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb
          sudo dpkg -i aws-signer-notation-cli.deb
          rm aws-signer-notation-cli.deb
        elif [ -f /etc/redhat-release ]; then
          echo "Installing AWS Signer Notation CLI for Amazon Linux/RHEL..."
          curl -Lo aws-signer-notation-cli.rpm https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/rpm/latest/aws-signer-notation-cli_amd64.rpm
          sudo rpm -i aws-signer-notation-cli.rpm
          rm aws-signer-notation-cli.rpm
        else
          echo "Using Debian package as default..."
          curl -Lo aws-signer-notation-cli.deb https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb
          sudo dpkg -i aws-signer-notation-cli.deb
          rm aws-signer-notation-cli.deb
        fi
    
        # Verify installation
        echo "Verifying installation..."
        notation version
        notation plugin list

    - name: Sign image with Notation using AWS Signer
      env:
        AWS_SIGNING_PROFILE_NAME: ${{ secrets.AWS_SIGNING_PROFILE_NAME }}
      run: |
        # Sign the image
        notation sign --plugin aws-signer --id $AWS_SIGNING_PROFILE_NAME ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
        
        # Verify the signature
        notation verify ${{ steps.set-image-name.outputs.FULL_IMAGE_NAME }}
